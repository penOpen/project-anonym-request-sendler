// <auto-generated />
using System;
using AnonymRequest.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnonymRequest.Storage.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Agent", b =>
                {
                    b.Property<int>("_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("_Id"), 1L, 1);

                    b.Property<string>("_ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_InstationId")
                        .HasColumnType("int");

                    b.Property<string>("_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_Working_hours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("_Id");

                    b.HasIndex("_InstationId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Instantion", b =>
                {
                    b.Property<int>("_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("_Id"), 1L, 1);

                    b.Property<int>("_RequestId")
                        .HasColumnType("int");

                    b.Property<string>("_agent_of_instation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_name_of_instation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("_Id");

                    b.HasIndex("_RequestId");

                    b.ToTable("Instations");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Request", b =>
                {
                    b.Property<int>("_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("_Id"), 1L, 1);

                    b.Property<string>("_Instation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_InstationId")
                        .HasColumnType("int");

                    b.Property<string>("_Request")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_UserToken")
                        .HasColumnType("int");

                    b.HasKey("_Id");

                    b.HasIndex("_UserToken");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Status", b =>
                {
                    b.Property<int>("_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("_Id"), 1L, 1);

                    b.Property<string>("_Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_RequestId")
                        .HasColumnType("int");

                    b.Property<bool?>("_Status")
                        .HasColumnType("bit");

                    b.HasKey("_Id");

                    b.HasIndex("_RequestId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.User", b =>
                {
                    b.Property<int>("_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("_Id"), 1L, 1);

                    b.Property<string>("_Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Agent", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.Instantion", "_Instantion")
                        .WithMany()
                        .HasForeignKey("_InstationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Instantion");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Instantion", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("_RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Request", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("_UserToken")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Status", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("_RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });
#pragma warning restore 612, 618
        }
    }
}
