// <auto-generated />
using System;
using AnonymRequest.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnonymRequest.Storage.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220520070422_n")]
    partial class n
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("is_mod")
                        .HasColumnType("bit");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ticket_id")
                        .HasColumnType("int");

                    b.Property<long>("time")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ticket_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.CommentFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("comment_id")
                        .HasColumnType("int");

                    b.Property<int>("file_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("comment_id");

                    b.HasIndex("file_id");

                    b.ToTable("CommentFiles");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Mod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("avatar")
                        .HasColumnType("int");

                    b.Property<int>("id_type")
                        .HasColumnType("int");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("avatar");

                    b.HasIndex("id_type");

                    b.ToTable("Mods");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.TicketFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("file_id")
                        .HasColumnType("int");

                    b.Property<int>("ticketinfo_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("file_id");

                    b.HasIndex("ticketinfo_id");

                    b.ToTable("TicketFiles");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.TicketInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketInfos");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Tickets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("id_ticketinfo")
                        .HasColumnType("int");

                    b.Property<Guid>("token")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("typeid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("id_ticketinfo");

                    b.HasIndex("typeid");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.TicketToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("key_token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ticket_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ticket_id");

                    b.ToTable("TicketTokens");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Types", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Comment", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.Tickets", "Tickets")
                        .WithMany()
                        .HasForeignKey("ticket_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.CommentFiles", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("comment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnonymRequest.Storage.Entities.Files", "File")
                        .WithMany()
                        .HasForeignKey("file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("File");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Mod", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.Files", "Avatar")
                        .WithMany()
                        .HasForeignKey("avatar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnonymRequest.Storage.Entities.Types", "Type")
                        .WithMany()
                        .HasForeignKey("id_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.TicketFiles", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.Files", "Files")
                        .WithMany()
                        .HasForeignKey("file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnonymRequest.Storage.Entities.TicketInfo", "Ticketinfo")
                        .WithMany()
                        .HasForeignKey("ticketinfo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Files");

                    b.Navigation("Ticketinfo");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.Tickets", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.TicketInfo", "Ticketinfo")
                        .WithMany()
                        .HasForeignKey("id_ticketinfo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnonymRequest.Storage.Entities.Types", "Type")
                        .WithMany()
                        .HasForeignKey("typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticketinfo");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AnonymRequest.Storage.Entities.TicketToken", b =>
                {
                    b.HasOne("AnonymRequest.Storage.Entities.Tickets", "Ticket")
                        .WithMany()
                        .HasForeignKey("ticket_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });
#pragma warning restore 612, 618
        }
    }
}
